# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Galaxy Wizard CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libgl1-mesa-dev libglu1-mesa-dev

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi

    - name: Lint with flake8
      run: |
        poetry run pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        # Exclude data files (they use DSL pattern with undefined names by design)
        # Exclude F824 (unused global statements are false positives for module-level globals)
        poetry run flake8 src --exclude=src/data,src/test/data --count --select=E9,F63,F7,F82 --ignore=F824 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 src --exclude=src/data,src/test/data --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        cd src && xvfb-run -a poetry run pytest ../tests/ -v --tb=short
      env:
        # Ensure tests can find data files
        PYTHONPATH: ${{ github.workspace }}/src
        # Set display for OpenGL
        DISPLAY: :99
        # SDL dummy drivers for headless testing
        SDL_VIDEODRIVER: dummy
        SDL_AUDIODRIVER: dummy

  build-windows:
    needs: test
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Install Poetry
      run: |
        (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
        echo "$env:APPDATA\Python\Scripts" >> $env:GITHUB_PATH

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi

    - name: Build Windows executable
      run: |
        poetry run pyinstaller main.spec --clean --noconfirm

    - name: Upload Windows executable
      uses: actions/upload-artifact@v3
      with:
        name: GalaxyWizard-Windows
        path: dist/GalaxyWizard.exe
        retention-days: 30

  build-linux:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libgl1-mesa-dev libglu1-mesa-dev

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi

    - name: Build Linux executable
      run: |
        poetry run pyinstaller main.spec --clean --noconfirm

    - name: Upload Linux executable
      uses: actions/upload-artifact@v3
      with:
        name: GalaxyWizard-Linux
        path: dist/GalaxyWizard
        retention-days: 30
